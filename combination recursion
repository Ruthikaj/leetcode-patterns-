class Solution {
public:
    // Helper function to find all combinations
    void helper(int i, int target, vector<int>& ds, vector<int>& arr, vector<vector<int>>& ans) {
        /*
        Arguments:
        - i: Current index in the array
        - target: Remaining target sum
        - ds: Current combination being built
        - arr: Input array (candidates)
        - ans: Stores all valid combinations
        */

        // Base case: If all elements are considered
        if (i == arr.size()) {
            if (target == 0) { // If target is 0, we found a valid combination
                ans.push_back(ds);
            }
            return; // End this recursive call
        }

        // Pick the current element if it can fit the target
        if (arr[i] <= target) {
            ds.push_back(arr[i]);          // Include the element
            helper(i, target - arr[i], ds, arr, ans); // Recur with reduced target
            ds.pop_back();                 // Backtrack: Remove the last element
        }

        // Do not pick the current element and move to the next
        helper(i + 1, target, ds, arr, ans);
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;  // To store all valid combinations
        vector<int> ds;           // Temporary storage for current combination
        helper(0, target, ds, candidates, ans); // Call the helper function
        return ans;               // Return all combinations
    }
};

/*
Dry Run Example:
Input: candidates = [2, 3, 6, 7], target = 7

Step-by-step explanation in tabular format:

| Recursive Call            | `i` | `target` | Current `ds`       | Action Taken                      | Result/Next Step                  |
|---------------------------|-----|----------|--------------------|------------------------------------|-----------------------------------|
| helper(0, 7, [], [2,3,6,7], ans) | 0   | 7        | []                 | Pick 2, Recur with `target=5`     | Continue recursion                |
| helper(0, 5, [2], [2,3,6,7], ans) | 0   | 5        | [2]               | Pick 2, Recur with `target=3`     | Continue recursion                |
| helper(0, 3, [2,2], [2,3,6,7], ans) | 0   | 3        | [2,2]            | Pick 2, Recur with `target=1`     | Continue recursion                |
| helper(0, 1, [2,2,2], [2,3,6,7], ans) | 0   | 1        | [2,2,2]         | Skip (2 > 1), Move to `i=1`       | Continue with `target=1`          |
| helper(1, 1, [2,2,2], [2,3,6,7], ans) | 1   | 1        | [2,2,2]         | Skip (3 > 1), Move to `i=2`       | Continue with `target=1`          |
| helper(2, 1, [2,2,2], [2,3,6,7], ans) | 2   | 1        | [2,2,2]         | Skip (6 > 1), Move to `i=3`       | Continue with `target=1`          |
| helper(3, 1, [2,2,2], [2,3,6,7], ans) | 3   | 1        | [2,2,2]         | Skip (7 > 1), Reached base case   | Backtrack, remove last 2          |
| helper(0, 7, [], [2,3,6,7], ans) | 0   | 7        | []                 | Skip (2), Move to `i=1`           | Recur with `target=7`             |
| helper(1, 7, [], [2,3,6,7], ans) | 1   | 7        | []                 | Pick 3, Recur with `target=4`     | Continue recursion                |
| ...                         | ... | ...      | ...                | ...                                | Explore all combinations          |

Circle Elimination Table:
| Step | Circle       | Eliminated | Remaining Circle |
|------|--------------|------------|------------------|
| 1    | [1, 2, 3, 4] | 2          | [1, 3, 4]        |
